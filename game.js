function BattleRoyalGame(){const canvas=document.getElementById("myCanvas");class Vector2{constructor(x,y){this.x=x;this.y=y}plus(v){return new Vector2(this.x+v.x,this.y+v.y)}minus(v){return new Vector2(this.x-v.x,this.y-v.y)}divide(f){return new Vector2(this.x/f,this.y/f)}multi(f){return new Vector2(this.x*f,this.y*f)}mag(){return Math.sqrt(this.x*this.x+this.y*this.y)}lerp(target,time){this.x+=(target.x-this.x)*time;this.y+=(target.y-this.y)*time}norm(){let l=this.mag();if(l<1e-8)return new Vector2(0,0);return new Vector2(this.x/l,this.y/l)}rot(amount){let r=Math.atan2(this.y,this.x);r+=amount;return new Vector2(Math.cos(r),Math.sin(r))}}let mouse=new Vector2(0,0);let snakes=[];function main(){window.requestAnimationFrame(main);render()}let lastTime=Date.now();let w;let h;let mod;let cameraSize;let ratio;let center;let cam;let maxBound=50;let collects=[];let camL=0;let camR=0;let camU=0;let camD=0;let camLClamp=0;let camRClamp=0;let camUClamp=0;let camDClamp=0;let gameRunning=true;let animTimer=0;let animState=0;let level=1;let scoreTarget=0;let scoreCurrent=0;function check(pos,ignoreID,radius){for(let i=0;i<snakes.length;++i){if(i===ignoreID)continue;let s=snakes[i];if(s.deadTime>0)continue;if(i>0)if(pos.minus(s.pos.plus(s.dir.multi(.5))).mag()<radius)return true;if(pos.minus(s.pos).mag()<radius)return true;for(let j=0;j<s.body.length;++j)if(pos.minus(s.body[j]).mag()<radius)return true}let pad=1;return pos.x>maxBound-pad||pos.x<pad||pos.y>maxBound-pad||pos.y<pad}function initialPosition(id){if(id===0)return new Vector2(maxBound/2,maxBound/2);let tryX=0;let tryY=0;let playerX=snakes[0].pos.x;let playerY=snakes[0].pos.y;for(let i=0;i<1e3;++i){let pad=3;tryX=Math.random()*(maxBound-pad*2)+pad;tryY=Math.random()*(maxBound-pad*2)+pad;let good=true;let difX=tryX-playerX;let difY=tryY-playerY;if(difX*difX+difY*difY<100)good=false;for(let j=0;j<snakes.length;++j){difX=tryX-snakes[j].pos.x;difY=tryY-snakes[j].pos.y;if(difX*difX+difY*difY<25){good=false}}if(good)break}return new Vector2(tryX,tryY)}function grabCollectsB(l,r,u,d){let returnC=null;for(let x=l;x<=r;++x){for(let y=u;y<=d;++y){let hash=y*maxBound+x;let c=collects[hash];while(c!=null){c.nextGrab=returnC;returnC=c;c=c.next}}}return returnC}function grabCollects(pos){let xx=clamp(Math.floor(pos.x),1,maxBound-2);let yy=clamp(Math.floor(pos.y),1,maxBound-2);let returnC=null;for(let x=xx-1;x<=xx+1;++x){for(let y=yy-1;y<=yy+1;++y){let hash=y*maxBound+x;let c=collects[hash];while(c!=null){c.nextGrab=returnC;returnC=c;c=c.next}}}return returnC}function render(){let currentTime=Date.now();let deltaTime=currentTime-lastTime;lastTime=currentTime;deltaTime=Math.min(deltaTime/1e3,.035);canvas.width=$(window).width()*2;canvas.height=$(window).height()*2;w=canvas.width;h=canvas.height;mod=Math.min(w,h);cameraSize=15;ratio=mod/cameraSize;center=new Vector2(w*.5,h*.5);let delta=mouse.minus(center).divide(ratio);let snakemap=[];for(let i=0;i<maxBound*maxBound;++i)snakemap[i]=null;function addCollide(pos,id,isHead){let x=clamp(Math.floor(pos.x),0,maxBound-1);let y=clamp(Math.floor(pos.y),0,maxBound-1);let hash=y*maxBound+x;let c={};c.isHead=isHead;c.pos=pos;c.id=id;c.next=snakemap[hash];snakemap[hash]=c}function grabCollide(pos,id){let xx=clamp(Math.floor(pos.x),2,maxBound-3);let yy=clamp(Math.floor(pos.y),2,maxBound-3);let returnC=null;for(let x=xx-2;x<=xx+2;++x){for(let y=yy-2;y<=yy+2;++y){let hash=y*maxBound+x;let c=snakemap[hash];while(c!=null){if(c.id!==id){c.nextGrab=returnC;returnC=c}c=c.next}}}return returnC}function checkCollide(pos,id,radius){let collide=grabCollide(pos,id);while(collide!=null){if(collide.isHead){if(id>collide.id)if(collide.pos.minus(pos).mag()<radius)return true}else{if(collide.pos.minus(pos).mag()<radius)return true}collide=collide.nextGrab}return false}function goodSpawnLocation(){let tryX=0;let tryY=0;for(let i=0;i<snakes.length;++i){let pad=3;tryX=Math.random()*(maxBound-pad*2)+pad;tryY=Math.random()*(maxBound-pad*2)+pad;let xx=clamp(Math.floor(tryX),5,maxBound-6);let yy=clamp(Math.floor(tryY),5,maxBound-6);for(let x=xx-5;x<=xx+5;++x)for(let y=yy-5;y<=yy+5;++y)if(snakemap[y*maxBound+x]!=null)return new Vector2(tryX,tryY)}return new Vector2(tryX,tryY)}if(gameRunning){for(let i=0;i<snakes.length;++i){let s=snakes[i];if(s.deadTime>0)continue;addCollide(s.pos,s.id,true);for(let j=0;j<s.body.length;++j)addCollide(s.body[j],s.id,false)}for(let i=0;i<snakes.length;++i){let s=snakes[i];if(s.deadTime>0)continue;if(checkCollide(s.pos,i,1)){kill(s)}}for(let i=1;i<snakes.length;++i){let s=snakes[i];if(s.deadTime>0){s.deadTime-=deltaTime;if(s.deadTime<=0){if(i>0)s.pos=goodSpawnLocation()}}}if(delta.mag()>.01)snakes[0].dir=delta.norm();for(let i=1;i<snakes.length;++i){let s=snakes[i];if((s.turnSpeedTimer-=deltaTime)<0){s.turnSpeedTimer=Math.random()*.5+.5;s.turnSpeedDirection=-s.turnSpeedDirection;s.turnSpeedTarget=Math.random()>.3?Math.random()*10:0}s.turnSpeedCurrent+=(s.turnSpeedTarget*s.turnSpeedDirection-s.turnSpeedCurrent)*deltaTime*2;s.dir=s.dir.rot(s.turnSpeedCurrent*deltaTime)}for(let i=1;i<snakes.length;++i){let s=snakes[i];if(s.deadTime>0)continue;if(check(s.pos.plus(s.dir.multi(1)),i,s.lookDistance)){for(let j=1;j<100;++j){if(!check(s.pos.plus(s.dir.rot(-.02*j).multi(1)),i,s.lookDistance)){s.dir=s.dir.rot(-.02*j);s.turnSpeedDirection=-s.turnSpeedDirection;break}if(!check(s.pos.plus(s.dir.rot(.02*j).multi(1)),i,s.lookDistance)){s.dir=s.dir.rot(.02*j);s.turnSpeedDirection=-s.turnSpeedDirection;break}}}}for(let i=0;i<snakes.length;++i){let s=snakes[i];if(s.deadTime>0)continue;s.pos=s.pos.plus(s.dir.multi(5*deltaTime));let x=s.pos.x;let y=s.pos.y;if(x<0||x>maxBound||y<0||y>maxBound)kill(s)}for(let i=0;i<snakes.length;++i){let snake=snakes[i];if(snake.deadTime>0)continue;let c=grabCollects(snake.pos);while(c!=null){let s=snake.pos.plus(snake.dir.multi(.5));let d=s.minus(c.pos);let dmag=d.mag();if(dmag<1){dmag=Math.max(0,dmag-deltaTime*10);c.pos=s.minus(d.norm().multi(dmag));if(s.minus(c.pos).mag()<.1){snake.score++;c.pos=new Vector2(Math.random()*maxBound,Math.random()*maxBound);c.sizeScale=outside(c.pos)?1:0;c.id=collectSpawnID++}removeCollect(c);addCollect(c)}c=c.nextGrab}}}for(let k=0;k<snakes.length;++k){let snake=snakes[k];if(snake.deadTime>0)continue;if(gameRunning){let bodyLengthTarget=5+snake.score/50;if(snake.bodyLength<bodyLengthTarget)snake.bodyLength=Math.min(snake.bodyLength+deltaTime*2,bodyLengthTarget);if(snake.bodyLength>bodyLengthTarget)snake.bodyLength=Math.max(snake.bodyLength-deltaTime*4,bodyLengthTarget)}snake.bodyBuilder.push(snake.pos);snake.body=[];let j=0;let cur=snake.pos;let seg=.5;let totalRemain=snake.bodyLength;for(j=snake.bodyBuilder.length-2;j>=0;--j){let tar=snake.bodyBuilder[j];let dif=tar.minus(cur);let walk=Math.min(Math.min(seg,dif.mag()),totalRemain);totalRemain-=walk;cur=cur.plus(dif.norm().multi(walk));seg-=walk;if(totalRemain<1e-4){snake.body.push(cur);break}if(seg<=0){++j;seg=.5;snake.body.push(cur)}}while(--j>0)snake.bodyBuilder.shift();if(totalRemain>1e-4)snake.body.push(cur)}scoreCurrent=snakes[0].score;let extendW=w/mod;let extendH=h/mod;cam=snakes[0].pos;camL=cam.x-cameraSize*.5*extendW-1;camR=cam.x+cameraSize*.5*extendW+1;camU=cam.y-cameraSize*.5*extendH-1;camD=cam.y+cameraSize*.5*extendH+1;camLClamp=clamp(Math.floor(camL),0,maxBound-1);camRClamp=clamp(Math.ceil(camR),0,maxBound-1);camUClamp=clamp(Math.floor(camU),0,maxBound-1);camDClamp=clamp(Math.ceil(camD),0,maxBound-1);let ctx=canvas.getContext("2d");ctx.fillStyle="#222";ctx.fillRect(0,0,w,h);ctx.fillStyle="#333";for(let x=-1;x<=maxBound+1;++x)drawSquare(ctx,x,maxBound/2,.05,maxBound/2+1);for(let y=-1;y<=maxBound+1;++y)drawSquare(ctx,maxBound/2,y,maxBound/2+1,.05);let coll=[];let cc=grabCollectsB(camLClamp,camRClamp,camUClamp,camDClamp);let c=cc;while(c!=null){c.pos.x=clamp(c.pos.x,0,maxBound);c.pos.y=clamp(c.pos.y,0,maxBound);if(c.sizeScale<1)c.sizeScale=Math.min(c.sizeScale+deltaTime*2,1);c.drift=(c.drift+deltaTime*5)%(Math.PI*2);c.pos.x+=Math.cos(c.drift)*deltaTime*.3;c.pos.y+=Math.sin(c.drift)*deltaTime*.3;removeCollect(c);addCollect(c);let i=0;while(i<coll.length&&coll[i].id<c.id)i++;coll.splice(i,0,c);c=c.nextGrab}for(let i=0;i<coll.length;++i){let c=coll[i];let ren=c.pos.minus(cam).multi(ratio);drawCircle(ctx,center.x+ren.x,center.y+ren.y,(c.size+.3)*c.sizeScale*ratio/2,"#000")}for(let i=0;i<coll.length;++i){let c=coll[i];let ren=c.pos.minus(cam).multi(ratio);drawCircle(ctx,center.x+ren.x,center.y+ren.y,c.size*c.sizeScale*ratio/2,c.color)}for(let i=0;i<snakes.length;++i){let s=snakes[i];if(s.deadTime>0)continue;for(let k=s.body.length-1;k>=0;--k){let ren2=s.body[k].minus(cam).multi(ratio);drawCircle(ctx,center.x+ren2.x,center.y+ren2.y,(s.size+.2)*ratio/2,"#000")}let ren=s.pos.minus(cam).multi(ratio);drawCircle(ctx,center.x+ren.x,center.y+ren.y,(s.size+.2)*ratio/2,"#000")}for(let i=0;i<snakes.length;++i){let s=snakes[i];if(s.deadTime>0)continue;for(let k=s.body.length-1;k>=0;--k){let ren2=s.body[k].minus(cam).multi(ratio);drawCircle(ctx,center.x+ren2.x,center.y+ren2.y,s.size*ratio/2,s.color)}let ren=s.pos.minus(cam).multi(ratio);drawCircle(ctx,center.x+ren.x,center.y+ren.y,s.size*ratio/2,s.color)}ctx.fillStyle="#666";drawSquare(ctx,-1e3+maxBound/2,0,1e3-maxBound/2-.5,1e3);drawSquare(ctx,1e3+maxBound/2,0,1e3-maxBound/2-.5,1e3);drawSquare(ctx,0,-1e3+maxBound/2,1e3,1e3-maxBound/2-.5);drawSquare(ctx,0,1e3+maxBound/2,1e3,1e3-maxBound/2-.5);drawWallOutline(ctx,maxBound/2,maxBound/2,maxBound/2+.5,maxBound/2+.5);let barW=7*ratio;let barH=.06*mod;let scorePercent=clamp(scoreCurrent/scoreTarget,0,1);ctx.fillStyle="#1d1c";ctx.beginPath();ctx.rect(center.x-barW/2,barH,barW*scorePercent,barH);ctx.fill();ctx.fillStyle="#444c";ctx.beginPath();ctx.rect(center.x+barW/2-barW*(1-scorePercent),barH,barW*(1-scorePercent),barH);ctx.fill();ctx.fillStyle="#FFF";ctx.font=.05*mod+"px Arial";ctx.textAlign="center";ctx.textBaseline="middle";ctx.fillText(""+level,center.x,.094*mod);function drawBlackCover(alpha){ctx.fillStyle="rgba(0,0,0,"+alpha+")";ctx.beginPath();ctx.rect(0,0,w,h);ctx.fill()}function drawText(text,offsetX,alpha){ctx.fillStyle="rgba(255,255,255,"+alpha+")";ctx.font=.1*mod+"px Arial";ctx.textAlign="center";ctx.textBaseline="middle";ctx.fillText(text,center.x+offsetX,center.y)}function drawLevelText(offsetX,alpha){ctx.fillStyle="rgba(255,255,255,"+alpha+")";ctx.font=.1*mod+"px Arial";ctx.textAlign="center";ctx.textBaseline="middle";ctx.fillText("Level "+level,center.x+offsetX,center.y)}function progressTimer(delta,reset=false){animTimer+=delta;if(animTimer>1){animTimer=0;animState=reset?0:animState+1;return true}return false}if(animState===0){if(scoreCurrent>=scoreTarget){gameRunning=false;animTimer=0;animState=1}if(snakes[0].deadTime>0){animTimer=0;animState=100}}if(animState===1){progressTimer(deltaTime*2);drawBlackCover(animTimer)}if(animState===2){progressTimer(deltaTime*2);drawBlackCover(1);drawLevelText(0,animTimer)}if(animState===3){if(progressTimer(deltaTime*2)){level++;gameStart()}drawBlackCover(1);drawLevelText(-animTimer*100,1-animTimer)}if(animState===4){progressTimer(deltaTime*2);drawBlackCover(1);drawLevelText((1-animTimer)*100,animTimer)}if(animState===5){progressTimer(deltaTime*2);drawBlackCover(1);drawLevelText(0,1-animTimer)}if(animState===6){if(progressTimer(deltaTime*2,true)){gameRunning=true}else{drawBlackCover(1-animTimer)}}if(animState===100){progressTimer(deltaTime*2)}if(animState===101){if(progressTimer(deltaTime*2))gameRunning=false;drawBlackCover(animTimer)}if(animState===102){if(progressTimer(deltaTime*2))gameStart();drawBlackCover(1);drawText("Game Over",0,animTimer)}if(animState===103){progressTimer(deltaTime*2);drawBlackCover(1);drawText("Game Over",-animTimer*100,1-animTimer)}if(animState===104){progressTimer(deltaTime*2);drawBlackCover(1);drawText("Level "+level,(1-animTimer)*100,animTimer)}if(animState===105){progressTimer(deltaTime*2);drawBlackCover(1);drawText("Level "+level,0,1-animTimer)}if(animState===106){if(progressTimer(deltaTime*2,true))gameRunning=true;else drawBlackCover(1-animTimer)}}function outside(pos){return pos.x<camL||pos.x>=camR||pos.y<camU||pos.y>=camD}function randOff(amt){return Math.random()*amt-amt*.5}function kill(snake){for(let i=0;i<snake.body.length;++i){let b=snake.body[i];for(let j=0;j<10;++j)makeCollect(b.x+randOff(.5),b.y+randOff(.5),snake.color)}for(let j=0;j<10;++j)makeCollect(snake.pos.x+randOff(.5),snake.pos.y+randOff(.5),snake.color);snake.body=[];snake.bodyBuilder=[];snake.bodyLength=0;snake.deadTime=1}function drawWallOutline(ctx,x,y,w,h){ctx.strokeStyle="#ff6666";ctx.lineWidth=.2*ratio;ctx.strokeRect(center.x+(x-cam.x-w)*ratio,center.y+(y-cam.y-h)*ratio,w*ratio*2,h*ratio*2)}function drawSquare(ctx,x,y,w,h){ctx.fillRect(center.x+(x-cam.x-w)*ratio,center.y+(y-cam.y-h)*ratio,w*ratio*2,h*ratio*2)}function onMouseEvent(e){mouse=new Vector2(e.clientX*2,e.clientY*2)}canvas.addEventListener("touchstart",function(e){onMouseEvent(e.touches[0])},false);canvas.addEventListener("touchmove",function(e){onMouseEvent(e.touches[0])},false);canvas.addEventListener("touchend",function(e){onMouseEvent(e.touches[0])},false);canvas.addEventListener("mousemove",function(e){onMouseEvent(e)},false);function drawCircleStroke(ctx,x,y,radius,fill){ctx.beginPath();ctx.arc(x,y,radius,0,2*Math.PI,false);ctx.lineWidth=radius*.2;ctx.fillStyle=fill;ctx.stroke();ctx.fill()}function drawCircle(ctx,x,y,radius,fill){ctx.beginPath();ctx.arc(x,y,radius,0,2*Math.PI,false);ctx.fillStyle=fill;ctx.fill()}function clamp(number,min,max){return Math.max(min,Math.min(number,max))}function randomDir(){let d=Math.random()*Math.PI*2;return new Vector2(Math.cos(d),Math.sin(d))}function recycleCollect(){let tries=200;while(true){let testX=Math.floor(Math.random()*maxBound);let testY=Math.floor(Math.random()*maxBound);if(testX<camL||testX>camR||testY<camU||testY>camD||--tries<0){let c=collects[testY*maxBound+testX];if(c!=null){removeCollect(c);return c}}}}function removeCollect(c){if(collects[c.hash]===c){collects[c.hash]=c.next}else{let cc=collects[c.hash];while(cc.next!==c)cc=cc.next;cc.next=cc.next.next;c.next=null}}function addCollect(c){let xx=clamp(Math.floor(c.pos.x),0,maxBound-1);let yy=clamp(Math.floor(c.pos.y),0,maxBound-1);c.hash=yy*maxBound+xx;c.next=collects[c.hash];collects[c.hash]=c}let collectSpawnID=0;let collectLimit=0;function makeCollect(x,y,color){collectLimit=Math.max(collectLimit-1,0);let collect=collectLimit>0?{}:recycleCollect();collect.pos=new Vector2(x,y);collect.size=Math.random()*.2+.35;collect.sizeScale=1;collect.drift=Math.random()*Math.PI*2;collect.color=color;collect.id=collectSpawnID++;addCollect(collect)}let colors=[];for(let i=0;i<10;++i)colors[i]="hsl("+i*(360/10)+", 100%, 50%)";function randomColor(){return colors[Math.floor(Math.random()*colors.length)]}function gameStart(){collectLimit=maxBound*maxBound*2;collectSpawnID=0;snakes=[];collects=[];collects.length=maxBound*maxBound;let snakeColorID=Math.floor(Math.random()*colors.length);let currentSnakeColorID=snakeColorID;function nextSnakeColorID(){let val=currentSnakeColorID;currentSnakeColorID=(currentSnakeColorID+1)%colors.length;if(currentSnakeColorID===snakeColorID)currentSnakeColorID=(currentSnakeColorID+1)%colors.length;return val}for(let ii=0;ii<collects.length;++ii)collects[ii]=null;for(let i=0;i<20;++i){let snake={};snake.pos=initialPosition(i);snake.dir=randomDir();snake.id=i;snake.size=1;snake.bodyBuilder=[];snake.body=[];snake.score=0;snake.bodyLength=0;snake.deadTime=0;snake.lookDistance=Math.random()*.4+1.1;snake.color=colors[nextSnakeColorID()];snake.turnSpeedDirection=Math.random()<.5?-1:1;snake.turnSpeedCurrent=0;snake.turnSpeedTarget=0;snake.turnSpeedTimer=0;snakes.push(snake)}for(let x=0;x<=maxBound;++x){for(let y=0;y<=maxBound;++y){for(let z=0;z<2;++z)makeCollect(x+Math.random()-.5,y+Math.random()-.5,randomColor())}}scoreTarget=2e5*level;scoreCurrent=0}gameStart();window.requestAnimationFrame(main);const eventParams={passive:false};document.body.addEventListener("touchcancel",ignore,eventParams);document.body.addEventListener("touchend",ignore,eventParams);function ignore(e){e.preventDefault()}}BattleRoyalGame();